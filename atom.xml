<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>bughoho&#39;s blog</title>
  
  
  <link href="https://en.sirtech.cc/atom.xml" rel="self"/>
  
  <link href="https://en.sirtech.cc/"/>
  <updated>2024-10-17T23:44:25.000Z</updated>
  <id>https://en.sirtech.cc/</id>
  
  <author>
    <name>bughoho</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Setting up a Cloudflare Worker to freely download large Hugging Face models</title>
    <link href="https://en.sirtech.cc/2024/10/17/setting-up-a-cloudflare-worker-to-freely-download-large-hugging-face-models/"/>
    <id>https://en.sirtech.cc/2024/10/17/setting-up-a-cloudflare-worker-to-freely-download-large-hugging-face-models/</id>
    <published>2024-10-17T23:44:25.000Z</published>
    <updated>2024-10-17T23:44:25.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Setting-up-a-Cloudflare-Worker-to-freely-download-large-Hugging-Face-models"><a href="#Setting-up-a-Cloudflare-Worker-to-freely-download-large-Hugging-Face-models" class="headerlink" title="Setting up a Cloudflare Worker to freely download large Hugging Face models"></a>Setting up a Cloudflare Worker to freely download large Hugging Face models</h2><h2 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h2><p>Recently, while working with ComfyUI, I encountered significant difficulties downloading models. I found existing online tools inadequate, and using a proxy quickly exhausted my bandwidth（this is a chinese’s problem:）. Tools like <code>huggingface-cli</code> and <code>ht-transfer</code> each had their own shortcomings. Ultimately, I devised a solution leveraging aria2’s multi-source download capability. By combining several open-source scripts, I created a script for high-speed large model downloads. You can find detailed information in <a href="https://github.com/bughoho/hfdownloader">this repository</a>. This article focuses on deploying the <code>cloudflare worker</code> script.</p><h2 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h2><ol><li>A registered Cloudflare account.</li><li>A domain name (free or purchased). Cloudflare’s DNS resolution can be slow for domains not managed by them, so using your own domain is recommended and affordable.</li><li>If your domain isn’t registered with Cloudflare, transfer it for management. Cloudflare’s DNS modification speed is exceptional.</li></ol><h2 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h2><ol><li><p>Log in to <a href="https://www.cloudflare.com/">Cloudflare</a> and navigate to the <a href="https://dash.cloudflare.com/">dashboard</a>.</p></li><li><p>Select “Workers &amp; Pages”:</p><p><img src="https://assets.sirtech.cc/img/cloudflare.webp" alt="dashboard.webp"></p></li><li><p>On the “Overview” page, click “Create”:</p><p><img src="https://assets.sirtech.cc/img/202410180005880.webp" alt="dashboard2"></p></li><li><p>Choose “Create Worker”:</p><p><img src="https://assets.sirtech.cc/img/202410180014912.webp" alt="dashboard3"></p></li><li><p>Enter a name for your worker (e.g., <code>r1</code>, <code>r2</code>). This will create a <code>worker.dev</code> subdomain, but we’ll be using a custom domain instead. </p><p><img src="https://assets.sirtech.cc/img/202410180017858.webp" alt="dashboard4"></p></li><li><p>Click “Deploy.” Cloudflare creates a default “Hello World” script.</p></li><li><p>Once created, access the worker’s detail page and click “Edit code” to open the script editor:</p><p><img src="https://assets.sirtech.cc/img/202410180021792.webp" alt="dashboard5"></p><p><img src="https://assets.sirtech.cc/img/202410180025823.webp" alt="dashboard6"></p></li><li><p>Download <code>worker.js</code> from <a href="https://github.com/bughoho/hfdownloader">this repository</a> and paste its contents into the editor, or copy the following code:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Welcome to Cloudflare Workers! This is your first worker.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * - Run &quot;npm run dev&quot; in your terminal to start a development server</span></span><br><span class="line"><span class="comment"> * - Open a browser tab at http://localhost:8787/ to see your worker in action</span></span><br><span class="line"><span class="comment"> * - Run &quot;npm run deploy&quot; to publish your worker</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Learn more at https://developers.cloudflare.com/workers/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">addEventListener</span>(<span class="string">&#x27;fetch&#x27;</span>, <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">  event.<span class="title function_">respondWith</span>(<span class="title function_">handleRequest</span>(event.<span class="property">request</span>))</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> specialCases = &#123;</span><br><span class="line">  <span class="string">&quot;*&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;Origin&quot;</span>: <span class="string">&quot;DELETE&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Referer&quot;</span>: <span class="string">&quot;DELETE&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handleSpecialCases</span>(<span class="params">request</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> url = <span class="keyword">new</span> <span class="title function_">URL</span>(request.<span class="property">url</span>);</span><br><span class="line">  <span class="keyword">const</span> rules = specialCases[url.<span class="property">hostname</span>] || specialCases[<span class="string">&quot;*&quot;</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> [key, value] <span class="keyword">of</span> <span class="title class_">Object</span>.<span class="title function_">entries</span>(rules)) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (value) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;KEEP&quot;</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;DELETE&quot;</span>:</span><br><span class="line">        request.<span class="property">headers</span>.<span class="title function_">delete</span>(key);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="attr">default</span>:</span><br><span class="line">        request.<span class="property">headers</span>.<span class="title function_">set</span>(key, value);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">handleRequest</span>(<span class="params">request</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> url = <span class="keyword">new</span> <span class="title function_">URL</span>(request.<span class="property">url</span>);</span><br><span class="line">  <span class="keyword">if</span> (url.<span class="property">pathname</span> === <span class="string">&quot;/&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Response</span>(<span class="string">&quot;Please enter the link after the /&quot;</span>)</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> actualUrlStr = url.<span class="property">pathname</span>.<span class="title function_">replace</span>(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;&quot;</span>) + url.<span class="property">search</span> + url.<span class="property">hash</span>;</span><br><span class="line">  <span class="keyword">const</span> actualUrl = <span class="keyword">new</span> <span class="title function_">URL</span>(actualUrlStr);</span><br><span class="line">  <span class="keyword">const</span> modifiedRequest = <span class="keyword">new</span> <span class="title class_">Request</span>(actualUrl, &#123;</span><br><span class="line">    <span class="attr">headers</span>: request.<span class="property">headers</span>,</span><br><span class="line">    <span class="attr">method</span>: request.<span class="property">method</span>,</span><br><span class="line">    <span class="attr">body</span>: request.<span class="property">body</span>,</span><br><span class="line">    <span class="attr">redirect</span>: <span class="string">&#x27;follow&#x27;</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="title function_">handleSpecialCases</span>(modifiedRequest);</span><br><span class="line">  <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(modifiedRequest);</span><br><span class="line">  <span class="keyword">const</span> modifiedResponse = <span class="keyword">new</span> <span class="title class_">Response</span>(response.<span class="property">body</span>, response);</span><br><span class="line">  modifiedResponse.<span class="property">headers</span>.<span class="title function_">set</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> modifiedResponse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://assets.sirtech.cc/img/202410180028706.webp" alt="dashboard8"></p></li><li><p>Click “Deploy” in the top right corner.</p></li><li><p>Upon successful deployment, click your worker’s name (e.g., <code>r5</code>) to return to the previous page.</p></li><li><p>Select the “Settings” tab.</p></li><li><p>Under “Domains and Routes,” click “Add”:</p><p><img src="https://assets.sirtech.cc/img/202410180033304.webp" alt="dashboard9"></p></li><li><p>In the sidebar, choose “Custom domain.”</p></li><li><p>Enter your chosen subdomain name (e.g., <code>r5</code>) and select your Cloudflare-managed domain from the dropdown menu:</p><p><img src="https://assets.sirtech.cc/img/202410180038826.webp" alt="dashboard10"></p></li></ol><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Your proxy domain is now set up. Use it as follows:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://r5.yourdomain.com/https://xxx.com/file.zip</span><br></pre></td></tr></table></figure><p>You should experience reasonable download speeds (several Mb&#x2F;s).</p><p>If only one proxy server is used, the speed will still be quite slow. How can multiple source servers be used for parallel downloading with aria2? Please refer to the project I wrote <a href="https://github.com/bughoho/hfdownloader">here</a>.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Setting-up-a-Cloudflare-Worker-to-freely-download-large-Hugging-Face-models&quot;&gt;&lt;a href=&quot;#Setting-up-a-Cloudflare-Worker-to-freely-down</summary>
      
    
    
    
    
    <category term="cloudflare" scheme="https://en.sirtech.cc/tags/cloudflare/"/>
    
    <category term="Tutorial" scheme="https://en.sirtech.cc/tags/Tutorial/"/>
    
  </entry>
  
  <entry>
    <title>Backing Up a Container&#39;s Data Volume with One Command</title>
    <link href="https://en.sirtech.cc/2024/10/15/backing-up-a-container-s-data-volume-with-one-command/"/>
    <id>https://en.sirtech.cc/2024/10/15/backing-up-a-container-s-data-volume-with-one-command/</id>
    <published>2024-10-15T14:14:40.000Z</published>
    <updated>2024-10-15T00:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Backing-Up-a-Container’s-Data-Volume-with-One-Command"><a href="#Backing-Up-a-Container’s-Data-Volume-with-One-Command" class="headerlink" title="Backing Up a Container’s Data Volume with One Command"></a>Backing Up a Container’s Data Volume with One Command</h2><h3 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h3><p>  When I first created the miniflux container, I used the official <code>docker-compose.yml</code> configuration:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">miniflux:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">miniflux/miniflux:latest</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;80:8080&quot;</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="attr">db:</span></span><br><span class="line">        <span class="attr">condition:</span> <span class="string">service_healthy</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DATABASE_URL=postgres://miniflux:secret@db/miniflux?sslmode=disable</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">RUN_MIGRATIONS=1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CREATE_ADMIN=1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ADMIN_USERNAME=admin</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ADMIN_PASSWORD=test123</span></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">postgres:15</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">POSTGRES_USER=miniflux</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">POSTGRES_PASSWORD=secret</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">POSTGRES_DB=miniflux</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">miniflux-db:/var/lib/postgresql/data</span></span><br><span class="line">    <span class="attr">healthcheck:</span></span><br><span class="line">      <span class="attr">test:</span> [<span class="string">&quot;CMD&quot;</span>, <span class="string">&quot;pg_isready&quot;</span>, <span class="string">&quot;-U&quot;</span>, <span class="string">&quot;miniflux&quot;</span>]</span><br><span class="line">      <span class="attr">interval:</span> <span class="string">10s</span></span><br><span class="line">      <span class="attr">start_period:</span> <span class="string">30s</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">miniflux-db:</span></span><br></pre></td></tr></table></figure><p>  Later, I noticed that the official configuration used a named data volume <code>miniflux-db</code>. This allows the database directory to be shared between multiple containers, although, in this case, sharing and reading the database directory is unnecessary. However, this has a drawback: if a system failure occurs, there might not be enough time to back up the Docker data volume, or backing it up might be overlooked entirely. The database holds a wealth of RSS links and articles accumulated from long-term subscriptions, forming a valuable dataset that could potentially serve as a knowledge base. Losing this data would be a significant loss.</p><p>  I researched the issue online. The methods I found were all similar, involving creating a temporary container, mounting the directory, using <code>tar</code> to create a compressed archive, and then unpacking it with a container. However, after reviewing the Docker commands, I discovered a single-command solution:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">cp</span> miniflux-db-1:/var/lib/postgresql/data $(<span class="built_in">pwd</span>)/miniflux-db/</span><br></pre></td></tr></table></figure><p>This command backs up the data. Create a directory named <code>miniflux-db</code> in the same location as your <code>docker-compose.yml</code> file. This will serve as the destination for the backup. In this command, <code>miniflux-db-1</code> represents the name of your Miniflux database container. Executing this command copies the database contents to the <code>miniflux-db</code> directory.</p><p>Now, you can modify the <code>docker-compose.yml</code> entry:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">db:</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">    <span class="comment"># - miniflux-db:/var/lib/postgresql/data</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">./miniflux-db:/var/lib/postgresql/data</span></span><br></pre></td></tr></table></figure><p>Finally, you can remove the data volume definition from the configuration, as it’s no longer necessary:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">miniflux-db:</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Backing-Up-a-Container’s-Data-Volume-with-One-Command&quot;&gt;&lt;a href=&quot;#Backing-Up-a-Container’s-Data-Volume-with-One-Command&quot; class=&quot;heade</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Redirect USB to a remote host using usb-ip</title>
    <link href="https://en.sirtech.cc/2024/06/06/redirect-usb-to-a-remote-host-using-usb-ip/"/>
    <id>https://en.sirtech.cc/2024/06/06/redirect-usb-to-a-remote-host-using-usb-ip/</id>
    <published>2024-06-06T00:00:00.000Z</published>
    <updated>2024-06-06T00:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Server-Server"><a href="#Server-Server" class="headerlink" title="Server (Server)"></a>Server (Server)</h2><p>Install usbip on the Linux server:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install linux-tools-`uname -r`</span><br><span class="line">sudo modprobe usbip-core</span><br><span class="line">sudo modprobe vhci-hcd</span><br><span class="line">sudo modprobe usbip-vudc</span><br><span class="line">sudo modprobe usbip-host</span><br></pre></td></tr></table></figure><p>Start the daemon:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo usbipd -D</span><br></pre></td></tr></table></figure><p>To enable automatic loading at boot time, add the module loading commands to <code>/etc/rc.local</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/sbin/modprobe usbip-core</span><br><span class="line">/sbin/modprobe vhci-hcd</span><br><span class="line">/sbin/modprobe usbip-vudc</span><br><span class="line">/sbin/modprobe usbip-host</span><br><span class="line">sudo usbipd -D</span><br></pre></td></tr></table></figure><p>Allow the following port through the firewall:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw allow 3240</span><br></pre></td></tr></table></figure><p>Use the following <code>lsusb</code> command to view detailed USB port information for the current system:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">lsusb</span></span><br><span class="line">Bus 006 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub</span><br><span class="line">Bus 005 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub</span><br><span class="line">Bus 001 Device 004: ID 203a:fffa Parallels Virtual Printer (EPSON L8160 Series)</span><br><span class="line">Bus 001 Device 003: ID 203a:fffa Parallels Virtual Printer (Print to PDF (Mac Desktop))</span><br><span class="line">Bus 001 Device 002: ID 203a:fffc Parallels Virtual Mouse</span><br><span class="line">Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub</span><br><span class="line">Bus 004 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub</span><br><span class="line">Bus 003 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub</span><br><span class="line">Bus 002 Device 005: ID 248a:8327 Maxxter </span><br><span class="line">Bus 002 Device 003: ID 2dc8:3109 Parallels Virtual USB1.1 HUB</span><br><span class="line">Bus 002 Device 002: ID 203a:fffe Parallels Virtual USB1.1 HUB</span><br><span class="line">Bus 002 Device 001: ID 1d6b:0001 Linux Foundation 1.1 root hub</span><br></pre></td></tr></table></figure><p>To identify a specific USB device, try disconnecting and reconnecting it while observing the output of the <code>lsusb</code> command.<br>In this example, the Maxxter device represents a keyboard and mouse receiver.<br>Use the following <code>usbip list</code> command with the ID <code>248a:8327</code> to find the corresponding bus ID:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">sudo usbip list -l</span><br><span class="line"> - busid 2-2.2 (2dc8:3109)</span><br><span class="line">   unknown vendor : unknown product (2dc8:3109)</span><br><span class="line"></span><br><span class="line"> - busid 2-2.3 (248a:8327)</span><br><span class="line">   Maxxter : unknown product (248a:8327)</span><br><span class="line"></span><br><span class="line"> - busid 1-1 (203a:fffc)</span><br><span class="line">   unknown vendor : unknown product (203a:fffc)</span><br><span class="line"></span><br><span class="line"> - busid 1-2 (203a:fffa)</span><br><span class="line">   unknown vendor : unknown product (203a:fffa)</span><br><span class="line"></span><br><span class="line"> - busid 1-3 (203a:fffa)</span><br><span class="line">   unknown vendor : unknown product (203a:fffa)</span><br></pre></td></tr></table></figure><p>Share the device using the following command:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo usbip bind -b 2-2.3</span><br><span class="line">usbip: info: bind device on busid 2-2.3: complete</span><br></pre></td></tr></table></figure><p>Once the binding is successful, the device will no longer be accessible from the server.</p><h2 id="Client-Target-Computer"><a href="#Client-Target-Computer" class="headerlink" title="Client (Target Computer)"></a>Client (Target Computer)</h2><p>The initial attempt involved using the open-source project <code>usbip-win</code> (<a href="https://github.com/cezanne/usbip-win">https://github.com/cezanne/usbip-win</a>); however, it resulted in system crashes. As an alternative, consider using <code>usbip-win2</code> (<a href="https://github.com/vadimgrn/usbip-win2">https://github.com/vadimgrn/usbip-win2</a>), which offers a graphical user interface and a more streamlined attachment process.</p>]]></content>
    
    
    <summary type="html">Redirect USB to a remote host using usb-ip</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Unlocking Hard Drive Limits! Booting Windows on a ¥50 ZTE CT321G2 Mini PC with iPXE Diskless Boot</title>
    <link href="https://en.sirtech.cc/2024/04/23/unlocking-hard-drive-limits-booting-windows-on-a-y-50-zte-ct321g2-mini-pc-with-ipxe-diskless-boot/"/>
    <id>https://en.sirtech.cc/2024/04/23/unlocking-hard-drive-limits-booting-windows-on-a-y-50-zte-ct321g2-mini-pc-with-ipxe-diskless-boot/</id>
    <published>2024-04-23T00:00:00.000Z</published>
    <updated>2024-04-23T00:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>I’ll begin by explaining why I decided to do this. I was using Apple TV to stream games to my computer at home and discovered that the Bluetooth-connected controller didn’t have vibration feedback, although it does when connected directly to the computer. After experiencing the controller vibration in Horizon, there was no going back. I needed a cheap solution. Enter this mini PC, found on Xianyu (a popular Chinese second-hand marketplace) for ¥50. It has an x86&#x2F;64 architecture, but only 2GB of RAM and a 4GB hard drive, leaving limited potential for customization. However, the CPU is similar to the J1900, and with four USB 2.0 and two USB 3.0 ports, it’s perfectly capable of extending the USB ports of my study computer and running some small programs.<br><img src="https://assets.sirtech.cc/img/202404291558568.png" alt="image.png"></p><p><img src="https://assets.sirtech.cc/img/202404291559240.png" alt="image.png"></p><p>I found a USB streaming software that only works on Windows, so I decided to install it on the mini PC. However, the 4GB hard drive storage was too limited for a full Windows installation. I also considered Windows To Go installed on a USB drive, but the cost of a compatible drive exceeded the price of the mini PC – unacceptable! So I landed on using the iSCSI diskless boot method. After several days of tinkering, I finally got it to boot successfully.</p><h1 id="Required-Files"><a href="#Required-Files" class="headerlink" title="Required Files"></a>Required Files</h1><ul><li>wimboot: Used to boot Windows PE.</li><li>ipxe: This needs to be compiled yourself to embed your own script.</li><li>Windows image</li><li>USB drive: Use a tool like Rufus to write the Windows image to the USB drive. You can also mount the image to a Synology shared folder and, in Windows PE, use the <code>net use</code> command to mount the folder containing the image and execute <code>setup.exe</code> to start the installation. I used a USB drive for convenience.</li></ul><p>You can download and compile the required files yourself, or you can use my compiled version and image. Just note that the port number 6111 must be the same as mine.</p><p>Download link for (wimboot, compiled ipxe, Windows image, my ipxe boot script):<br><a href="https://pan.baidu.com/s/1Lb69OU13pGFt-ff78TSGpA?pwd=1234">https://pan.baidu.com/s/1Lb69OU13pGFt-ff78TSGpA?pwd=1234</a> Password: 1234<br><a href="https://url95.ctfile.com/d/44827295-61067476-560716?p=4681">https://url95.ctfile.com/d/44827295-61067476-560716?p=4681</a> (Access password: 4681)</p><h1 id="0-Issues-Encountered"><a href="#0-Issues-Encountered" class="headerlink" title="0. Issues Encountered"></a>0. Issues Encountered</h1><h2 id="0-0-Windows-Version"><a href="#0-0-Windows-Version" class="headerlink" title="0.0 Windows Version"></a>0.0 Windows Version</h2><p>The only Windows version that installed successfully was Windows 1607. Versions before and after this didn’t work. Don’t ask me how I know 😭.</p><p>I initially wanted to install Windows directly on the iSCSI hard drive on another computer and use it on the mini PC. However, I encountered an “inaccessible boot device” error when using the DISM command to extract files from the Windows image and write them to the iSCSI hard drive.</p><p>Later, I tried installing directly from a USB drive and encountered the same error. Finally, I determined it was an issue with the image. I will try directly writing to the iSCSI hard drive using the DISM command next time.</p><h3 id="0-1-Synology-iSCSI-Format"><a href="#0-1-Synology-iSCSI-Format" class="headerlink" title="0.1 Synology iSCSI Format"></a>0.1 Synology iSCSI Format</h3><p>The iSCSI hard drive I deployed on Synology is one target mapped to one LUN:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sanboot iscsi:192.168.1.225::::iqn.2000-01.com.synology:diskstation.Target-win10</span><br></pre></td></tr></table></figure><p>This could never connect. The colons :::: without anything between them represent default values. The third colon is followed by the LUN number. Online articles suggested using the default values with the <code>sanboot</code> command. However, it only booted successfully after I changed the LUN number to 1:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sanboot iscsi:192.168.1.225:::1:iqn.2000-01.com.synology:diskstation.Target-win10</span><br></pre></td></tr></table></figure><p>The part after the third colon is the LUN ID. If left blank, the default is 0. It seems Synology’s LUN mapping starts from 1.</p><h3 id="0-2-Synology-iSCSI-Initial-Login-Permission-Issue"><a href="#0-2-Synology-iSCSI-Initial-Login-Permission-Issue" class="headerlink" title="0.2 Synology iSCSI Initial Login Permission Issue"></a>0.2 Synology iSCSI Initial Login Permission Issue</h3><p>If your Synology iSCSI target has permissions set, the first <code>sanboot</code> execution will fail to connect (“can not open SAN device”). To resolve this, go to the iSCSI target page in Synology SAN Manager and wait for the mini PC to execute <code>sanboot</code>. You’ll see the client IP connected in the iSCSI page of Synology SAN Manager. Click “create new host” and set read and write permissions for this client to access the LUN. Restart the mini PC and boot again – the connection should work.<br><img src="https://assets.sirtech.cc/img/202404251520568.png" alt="image.png"></p><h3 id="0-3-ipxe-Compilation"><a href="#0-3-ipxe-Compilation" class="headerlink" title="0.3 ipxe Compilation"></a>0.3 ipxe Compilation</h3><p>If you’re using the ipxe I compiled, you can skip this part. If you need to compile it yourself, you’ll need an Ubuntu virtual machine or an Ubuntu Docker environment – you can’t compile it on macOS or Windows without complex cross-compilation commands. </p><p>Regarding the compilation command, the dependencies mentioned on the official website are outdated. I installed these:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install git  </span><br><span class="line"><span class="built_in">sudo</span> apt install git-core <span class="comment"># This is required for compilation, otherwise &quot;file not found&quot; errors may occur.</span></span><br><span class="line"><span class="built_in">sudo</span> apt install liblzma-dev <span class="comment"># This is required, otherwise &quot;lzma.h&quot; errors may occur.</span></span><br><span class="line"><span class="built_in">sudo</span> apt install gcc</span><br><span class="line"><span class="built_in">sudo</span> apt install make  </span><br><span class="line"><span class="built_in">sudo</span> apt install mtools <span class="comment"># DOS command simulator</span></span><br><span class="line"><span class="built_in">sudo</span> apt install mkisofs <span class="comment"># Not required if not generating ISO </span></span><br><span class="line"><span class="built_in">sudo</span> apt install syslinux <span class="comment"># Not required if not generating ISO</span></span><br></pre></td></tr></table></figure><p>Create a chain script named <code>chain.ipxe</code> in the <code>src</code> directory with this content:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#!ipxe</span><br><span class="line">dhcp</span><br><span class="line">chain http://$&#123;next-server&#125;:6111/boot.ipxe</span><br></pre></td></tr></table></figure><p><code>$&#123;next-server&#125;:6111</code> is the more complete boot script I put on Synology Web Station. The variable <code>$&#123;next-server&#125;</code> is the address of the next server returned by the DHCP server, which I’ll explain how to set up in the “Configuring the Router” section. Now compile:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd src</span><br><span class="line">make clean</span><br><span class="line">make bin-x86_64-efi/ipxe.efi EMBED=chain.ipxe</span><br><span class="line">mkdir -p myipxe/64</span><br><span class="line">cp bin-x86_64-efi/ipxe.efi myipxe/64</span><br></pre></td></tr></table></figure><p>Go to <code>src/myipxe/64</code>, find <code>ipxe.efi</code>, copy it to the Synology Web Station directory, and use a browser to ensure <code>http://192.168.1.225:6111/ipxe.efi</code> is accessible.</p><p>Now, when the mini PC boots from the network, it can use ipxe to execute the commands in <code>http://$&#123;next-server&#125;:61111/boot.ipxe</code>.</p><h3 id="0-4-Network-Port-Issue"><a href="#0-4-Network-Port-Issue" class="headerlink" title="0.4 Network Port Issue"></a>0.4 Network Port Issue</h3><p>The network card in this host is a Realtek 8168, with an adaptive rate of 10&#x2F;100&#x2F;1000Mbps. After entering the system, the network interface showed 100Mbps. After some investigation, I discovered it was a network cable issue. I swapped the cable and the negotiated rate became 1000Mbps. However, a speed test on the intranet using librespeed only reached around 500Mbps – half the speed. Generally, this is enough.<br><img src="https://assets.sirtech.cc/img/202404281104219.png" alt="image.png"></p><h1 id="1-Installation-Steps"><a href="#1-Installation-Steps" class="headerlink" title="1. Installation Steps"></a>1. Installation Steps</h1><h2 id="1-0-Network-Boot-Flowchart"><a href="#1-0-Network-Boot-Flowchart" class="headerlink" title="1.0 Network Boot Flowchart"></a>1.0 Network Boot Flowchart</h2><p>First, the complete PXE network boot flowchart:</p><p>![[ipxe引导示意图.excalidraw.svg]]</p><h3 id="1-0-BIOS-Settings"><a href="#1-0-BIOS-Settings" class="headerlink" title="1.0 BIOS Settings"></a>1.0 BIOS Settings</h3><ul><li>BIOS password: zte-ct  </li><li>Change the BIOS boot order to network boot first.  </li><li>Change the IDE configuration from AMDAHCI to AHCI.  </li><li>Change the boot type to UEFI boot or dual boot type.  </li><li>Change the PXE boot capability to UEFI:IPv4.</li></ul><p>Note: If you encounter issues with the BIOS and the device becomes unresponsive, you can reset it to factory settings by removing the battery, letting it discharge, and then reinserting it. </p><h3 id="1-1-Configuring-the-Router"><a href="#1-1-Configuring-the-Router" class="headerlink" title="1.1 Configuring the Router"></a>1.1 Configuring the Router</h3><p>You need to configure the DHCP server on your router to tell the network card the address of the TFTP server and the name of the boot file. My router system is iStoreOS (based on OpenWRT). Go to Network-&gt;DHCP&#x2F;DNS-&gt;PXE&#x2F;TFTP settings and add the ipxe information:<br><img src="https://assets.sirtech.cc/img/202404250309851.png" alt="image.png"></p><p>Enter the Synology IP address, name, and boot firmware file name:<br><img src="https://assets.sirtech.cc/img/202404250315888.png" alt="image.png"></p><p>This tells the DHCP server where to download the boot file next.</p><p>Other routers are similar, and some have this function built-in. If not, you can turn off the DHCP service on the router and turn on the DHCP service on Synology, letting Synology provide IP address services to the intranet.<br>Note: If you use Synology’s DHCP service, you must disable the DHCP service on the router to avoid IP address conflicts. </p><h3 id="1-2-Configuring-TFTP-Service-on-Synology"><a href="#1-2-Configuring-TFTP-Service-on-Synology" class="headerlink" title="1.2 Configuring TFTP Service on Synology"></a>1.2 Configuring TFTP Service on Synology</h3><p>If your router supports TFTP, you can put the boot firmware on the router. For convenience, I put all the files on Synology for easy management.</p><p>Open the Synology page, go to Control Panel-&gt;File Services-&gt;Advanced Settings-&gt;TFTP, check “Enable TFTP service”, and set the root folder:<br><img src="https://assets.sirtech.cc/img/202404250321900.png" alt="image.png"></p><p>Put <code>ipxe.efi</code> in the <code>/web/tftp</code> directory (see the compilation method above).<br>As mentioned earlier, <code>ipxe.efi</code> embeds a custom script that uses the <code>chain</code> command to chain boot a new script:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chain http://<span class="variable">$&#123;next-server&#125;</span>:6111/boot.ipxe</span><br></pre></td></tr></table></figure><p>We do this because embedding the boot script into <code>ipxe.efi</code> makes it less flexible to modify. It’s more convenient to directly chain boot a new script. I also found that <code>ipxe.efi</code> seems to implicitly execute the <code>autoexec.ipxe</code> script when it starts, but I couldn’t find documentation for this on the official website. Feel free to experiment – if it works, you can skip compiling <code>ipxe.efi</code> and use the official release version directly. </p><h3 id="1-3-Create-an-HTTP-Service-on-Synology-Web-Station-Set-the-Port-Number-to-6111-in-the-Script"><a href="#1-3-Create-an-HTTP-Service-on-Synology-Web-Station-Set-the-Port-Number-to-6111-in-the-Script" class="headerlink" title="1.3 Create an HTTP Service on Synology Web Station, Set the Port Number to 6111 in the Script"></a>1.3 Create an HTTP Service on Synology Web Station, Set the Port Number to 6111 in the Script</h3><p>Open Web Station-&gt;Web Service on Synology and select “PHP”:<br><img src="https://assets.sirtech.cc/img/202404281736498.png" alt="image.png"></p><p>You can choose any name and description. Set the directory to <code>web/www</code> (create this directory yourself):<br><img src="https://assets.sirtech.cc/img/202404281731725.png" alt="image.png"></p><p><img src="https://assets.sirtech.cc/img/202404281737360.png" alt="image.png"></p><p>Add a new portal in the web portal:<br><img src="https://assets.sirtech.cc/img/202404281739400.png" alt="image.png"><br>Put a file in the <code>web/www</code> directory and try to access it using the HTTP protocol. If you can read it, there’s no problem.</p><h3 id="1-4-Creating-Windows-PE-Windows-Preinstallation-Environment"><a href="#1-4-Creating-Windows-PE-Windows-Preinstallation-Environment" class="headerlink" title="1.4 Creating Windows PE (Windows Preinstallation Environment)"></a>1.4 Creating Windows PE (Windows Preinstallation Environment)</h3><p>This step lets us enter the Windows installer’s command line interface to start the Windows image on the USB drive, but not actually install Windows using these files. We’re creating a very simple Windows PE.</p><p>Mount the Windows image and copy these files to Synology’s web service root directory for port 6111, maintaining the directory structure:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">boot/bcd</span><br><span class="line">boot/bcd.sdi</span><br><span class="line">sources/boot.wim</span><br></pre></td></tr></table></figure><p>Put the <code>wimboot</code> file you downloaded earlier into this directory as well. The final web service root directory should look like this:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wimboot</span><br><span class="line">boot/bcd</span><br><span class="line">boot/bcd.sdi</span><br><span class="line">sources/boot.wim</span><br></pre></td></tr></table></figure><p>Now we have a minimal PE pre-installation environment that can be booted by ipxe.</p><h5 id="1-5-boot-ipxe-Startup-Script"><a href="#1-5-boot-ipxe-Startup-Script" class="headerlink" title="1.5 boot.ipxe Startup Script"></a>1.5 <code>boot.ipxe</code> Startup Script</h5><p>I found some scripts online and modified them to implement two functions: booting from an iSCSI disk and entering the Windows PE environment we just created. Here’s the script:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!ipxe</span></span><br><span class="line"><span class="comment"># The following 3000 is the menu waiting time, representing 3 seconds.</span></span><br><span class="line">   <span class="built_in">set</span> menu-timeout 3000</span><br><span class="line">   <span class="built_in">set</span> menu-default WINDOWS</span><br><span class="line">   isset <span class="variable">$&#123;ip&#125;</span> || dhcp</span><br><span class="line"><span class="built_in">set</span> initiator-iqn iqn.<span class="variable">$&#123;product&#125;</span>:<span class="variable">$&#123;mac:hexhyp&#125;</span></span><br><span class="line"></span><br><span class="line">:start</span><br><span class="line">  menu iPXE Boot Menu</span><br><span class="line">  item --gap --             --------------------------------- WIN --------------------------------</span><br><span class="line">  item WINDOWS                 BOOT WINDOWS(ISCSI)</span><br><span class="line">  item --gap --             ---------------------------- Advanced options ------------------------</span><br><span class="line">  item --key p pe              PE system                                                     -- p</span><br><span class="line">  item --key s shell           shell                                                         -- s</span><br><span class="line">  item --key r reboot          reboot computer                                               -- r</span><br><span class="line">  item --key x <span class="built_in">exit</span>            Exit iPXE and <span class="built_in">continue</span> BIOS boot                              -- x</span><br><span class="line">  item --gap --  </span><br><span class="line">  item --gap --             ------------------------------- systeminfo ---------------------------</span><br><span class="line">  item --gap --             DHCP Server: <span class="variable">$&#123;dhcp-server&#125;</span></span><br><span class="line">  item --gap --             IP: <span class="variable">$&#123;ip&#125;</span></span><br><span class="line">  item --gap --             MAC: <span class="variable">$&#123;mac&#125;</span></span><br><span class="line">  item --gap --             netmask: <span class="variable">$&#123;netmask&#125;</span></span><br><span class="line">  item --gap --             Gateway: <span class="variable">$&#123;gateway&#125;</span></span><br><span class="line">  item --gap --             DNS: <span class="variable">$&#123;dns&#125;</span></span><br><span class="line">  item --gap --             UUID: <span class="variable">$&#123;uuid&#125;</span></span><br><span class="line">  item --gap --             initiator-iqn: <span class="variable">$&#123;initiator-iqn&#125;</span></span><br><span class="line">  choose --<span class="built_in">timeout</span> <span class="variable">$&#123;menu-timeout&#125;</span> --default <span class="variable">$&#123;menu-default&#125;</span> selected</span><br><span class="line">  goto <span class="variable">$&#123;selected&#125;</span></span><br><span class="line"></span><br><span class="line">:reboot</span><br><span class="line">  reboot</span><br><span class="line"></span><br><span class="line">:<span class="built_in">exit</span></span><br><span class="line">  <span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line">:shell</span><br><span class="line">  shell</span><br><span class="line">goto start</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">:WINDOWS </span><br><span class="line">  chain /mac/<span class="variable">$&#123;mac:hexhyp&#125;</span> || goto install</span><br><span class="line"></span><br><span class="line">:pe</span><br><span class="line">  sanhook iscsi:<span class="variable">$&#123;next-server&#125;</span>:::1:iqn.2000-01.com.synology:diskstation.Target-win10 || goto shell</span><br><span class="line">  kernel wimboot</span><br><span class="line">  initrd http://<span class="variable">$&#123;next-server&#125;</span>:6111/boot/bcd         BCD</span><br><span class="line">  initrd http://<span class="variable">$&#123;next-server&#125;</span>:6111/boot/boot.sdi    boot.sdi</span><br><span class="line">  initrd http://<span class="variable">$&#123;next-server&#125;</span>:6111/sources/boot.wim boot.wim</span><br><span class="line">  boot</span><br></pre></td></tr></table></figure><p>Put <code>boot.ipxe</code> in the web root directory, and then you can turn on the mini PC.</p><h5 id="1-6-Installing-Windows"><a href="#1-6-Installing-Windows" class="headerlink" title="1.6 Installing Windows"></a>1.6 Installing Windows</h5><p>First, insert the installation USB drive into the USB port. After booting, the mini PC will execute <code>boot.ipxe</code>, and you’ll see a menu. Select the “PE System” menu option. </p><p>This will load the PE environment. Note that this environment is a minimal setup designed specifically for this installation process. Clicking “install” will fail because the full set of files isn’t present. We’re using it to access the command line interface. Select “Repair computer”-&gt;”Troubleshooting” and then find the command line option:<br><img src="https://assets.sirtech.cc/img/202404281750489.png" alt="image.png"></p><p>After using Rufus to write the Windows image to your USB drive, insert the drive into the mini PC. In the command line interface, use the <code>dir</code> command to find the USB drive’s letter (e.g., <code>dir c:</code>, <code>dir d:</code>). Once you’ve identified the correct drive letter, navigate to it using <code>cd /d</code> followed by the letter (e.g., <code>cd /d c:\</code>). Finally, execute <code>setup.exe</code> to launch the Windows installation program from the USB drive. </p><h5 id="1-7-Directly-Booting-Windows-on-the-iSCSI-Disk"><a href="#1-7-Directly-Booting-Windows-on-the-iSCSI-Disk" class="headerlink" title="1.7 Directly Booting Windows on the iSCSI Disk"></a>1.7 Directly Booting Windows on the iSCSI Disk</h5><p>My <code>boot.ipxe</code> script boots Windows by starting different iSCSI disks based on the MAC address.</p><p>You’ll need to create a file at <code>/mac/xx-xx-xx-xx-xx-xx</code> under the web root directory. This is also a boot script, and its content should be:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!ipxe</span></span><br><span class="line"><span class="built_in">set</span> keep-san 1</span><br><span class="line">sanboot iscsi:<span class="variable">$&#123;next-server&#125;</span>:::1:iqn.2000-01.com.synology:diskstation.Target-win10</span><br><span class="line">boot</span><br></pre></td></tr></table></figure><p>I wrote it this way to boot multiple hosts with one script. If you don’t need to network boot multiple computers, add these lines directly into <code>boot.ipxe</code> under the <code>:WINDOWS</code> section:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">:WINDOWS </span><br><span class="line">  set keep-san 1</span><br><span class="line">  sanboot iscsi:$&#123;next-server&#125;:::1:iqn.2000-01.com.synology:diskstation.Target-win10</span><br><span class="line">  boot</span><br></pre></td></tr></table></figure><p>Now, select the “BOOT WINDOWS(ISCSI)” menu option at boot to directly enter the Windows interface.</p><h4 id="Final-Result"><a href="#Final-Result" class="headerlink" title="Final Result"></a>Final Result</h4><p>The CPU was almost fully loaded after installation. The original Windows installation runs several programs by default. This will settle down after a while. You can also use Windows optimization tools to disable unnecessary services.<br><img src="https://assets.sirtech.cc/img/202404241310661.png" alt="image.png"></p><p>After installation, immediately disable the system’s virtual memory. When you boot Windows disklessly, the page file for virtual memory is created on the Synology iSCSI hard drive, impacting performance.<br><img src="https://assets.sirtech.cc/img/202404241319664.png" alt="image.png"></p><p>For just ¥50, this mini PC offers surprising versatility. Not only can it run Windows, but it also opens up possibilities for running lightweight Linux distributions or other projects.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;I’ll begin by explaining why I decided to do this. I was using Apple TV to stream games to my computer at home and discovered that the Bl</summary>
      
    
    
    
    <category term="hardware" scheme="https://en.sirtech.cc/categories/hardware/"/>
    
    
    <category term="Synology" scheme="https://en.sirtech.cc/tags/Synology/"/>
    
    <category term="IPXE" scheme="https://en.sirtech.cc/tags/IPXE/"/>
    
    <category term="windows" scheme="https://en.sirtech.cc/tags/windows/"/>
    
    <category term="nas" scheme="https://en.sirtech.cc/tags/nas/"/>
    
  </entry>
  
  <entry>
    <title>Connecting to Synology DSM Using VSCode Remote SSH</title>
    <link href="https://en.sirtech.cc/2024/04/04/connecting-to-synology-dsm-using-vscode-remote-ssh/"/>
    <id>https://en.sirtech.cc/2024/04/04/connecting-to-synology-dsm-using-vscode-remote-ssh/</id>
    <published>2024-04-04T00:00:00.000Z</published>
    <updated>2024-04-04T00:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Connecting to Synology DSM Using VSCode Remote SSH</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><p>When connecting to Synology directly via VSCode SSH, you may encounter the following error:</p><blockquote><p>The remote host may not meet VS Code Server’s prerequisites for glibc and libstdc++</p></blockquote><p><a href="https://community.synology.com/enu/forum/10/post/153781">https://community.synology.com/enu/forum/10/post/153781</a></p><p>Resolution:</p><h3 id="1-Connect-to-Synology-via-SSH-Command-Line"><a href="#1-Connect-to-Synology-via-SSH-Command-Line" class="headerlink" title="1. Connect to Synology via SSH Command Line"></a>1. Connect to Synology via SSH Command Line</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh yourname@192.168.1.x</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vim /usr/bin/ldd</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#/bin/sh </span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;ldd 2.20&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 755 /usr/bin/ldd</span><br></pre></td></tr></table></figure><h3 id="2-Enable-Port-Forwarding"><a href="#2-Enable-Port-Forwarding" class="headerlink" title="2. Enable Port Forwarding"></a>2. Enable Port Forwarding</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">cp</span> sshd_config sshd_config.bck</span><br><span class="line"><span class="built_in">cd</span> /etc/ssh/</span><br><span class="line">/etc/ssh$ <span class="built_in">sudo</span> vim sshd_config</span><br></pre></td></tr></table></figure><p>Modify the configuration as follows:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AllowAgentForwarding <span class="built_in">yes</span> </span><br><span class="line">AllowTcpForwarding <span class="built_in">yes</span></span><br></pre></td></tr></table></figure><p><img src="https://assets.sirtech.cc/img/202404041818570.png" alt="alt"><br>Note: There are two occurrences of these parameters. Uncomment them at the beginning of the file and add them again at the end.<br><img src="https://assets.sirtech.cc/img/202404041820949.png" alt="image.png"></p><p>It is recommended to avoid modifying the root and admin account configurations. Instead, add a new configuration block at the end of the file for your DSM account (replace “username” with your actual username):</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Match User username</span><br><span class="line">    AllowAgentForwarding yes</span><br><span class="line">    AllowTcpForwarding yes</span><br></pre></td></tr></table></figure><h3 id="3-Restart-sshd"><a href="#3-Restart-sshd" class="headerlink" title="3. Restart sshd"></a>3. Restart sshd</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl restart sshd </span><br><span class="line"><span class="built_in">rm</span> -rf ~/.vscode-server/</span><br></pre></td></tr></table></figure><p>See also: <a href="https://github.com/microsoft/vscode-remote-release/issues/8132#issuecomment-1515989319">microsoft&#x2F;vscode-remote-release#8132 (comment)</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Connecting to Synology DSM Using VSCode Remote SSH&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;</summary>
      
    
    
    
    
    <category term="Synology" scheme="https://en.sirtech.cc/tags/Synology/"/>
    
  </entry>
  
  <entry>
    <title>A Non-Professional Comparison of Various Open Source Assembly/Disassembly Engines</title>
    <link href="https://en.sirtech.cc/2015/11/08/a-non-professional-comparison-of-various-open-source-assembly-and-disassembly-engines/"/>
    <id>https://en.sirtech.cc/2015/11/08/a-non-professional-comparison-of-various-open-source-assembly-and-disassembly-engines/</id>
    <published>2015-11-08T00:00:00.000Z</published>
    <updated>2015-11-08T00:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="A-Non-Professional-Comparison-of-Various-Open-Source-Assembly-Disassembly-Engines"><a href="#A-Non-Professional-Comparison-of-Various-Open-Source-Assembly-Disassembly-Engines" class="headerlink" title="A Non-Professional Comparison of Various Open Source Assembly&#x2F;Disassembly Engines"></a>A Non-Professional Comparison of Various Open Source Assembly&#x2F;Disassembly Engines</h2><p>For both personal interest and work, I have studied and used various popular open source x86&#x2F;64 assembly and disassembly engines. Analyzing and operating on assembly instructions requires either studying the Intel instruction set and writing an engine yourself, or using an existing open source engine. Because writing one from scratch is time-consuming, laborious, and error-prone, using an existing engine is preferable.</p><p>Here is a comparison of some of the more popular disassembly engines that I have used:</p><h2 id="1-Ollydbg’s-ODDisassm"><a href="#1-Ollydbg’s-ODDisassm" class="headerlink" title="1. Ollydbg’s ODDisassm"></a>1. Ollydbg’s ODDisassm</h2><p><a href="http://www.ollydbg.de/">ODDisassm</a>, a component of Ollydbg, was the first open source disassembly engine I used. In 2007, due to the limited options available, I used this library to write a very simple virtual machine, as described in my article, <a href="http://bbs.pediy.com/showthread.php?t=66210">“Encryption and Decryption (3)”</a>. At the time, the requirements for the disassembly library were not high, only that string text be used as an intermediate representation for encoding&#x2F;decoding.</p><p>The advantage of this disassembly library is that it contains an assembly interface; that is, it can parse and encode text strings into binary. This feature alone was unique at the time. Few people in the open source community were doing this work. In recent years, the new debugger x64dbg has also developed an open source assembly library, XEDParse, which is similar in function to OD’s text parsing, supports a more complete instruction set, has fewer bugs, and also supports X64. Maintenance has been very strong.</p><p>However, ODDisassm also has many shortcomings, such as:</p><ol><li>Incomplete instruction set support. Since Ollydbg has been out of maintenance for a long time, even the support for the MMX instruction set is incomplete. The multiple versions of the current INTEL&#x2F;AMD extended instruction set standards, SSE5&#x2F;AVX&#x2F;AES&#x2F;XOP, and others, cannot be parsed at all.</li><li>The decoded structure is not detailed enough. For example, the instruction prefix support is not friendly enough. This can be seen from the disassembly window of Ollydbg. Except for instructions such as movs&#x2F;cmps, repcc and other instructions are separated when combined. For another example, the register cannot represent high 8-bit registers such as <code>ah\bh\ch\dh</code>.</li><li>The author no longer maintains the open source version after the one-time open source, and it is difficult to fix bugs in disassembly in a timely manner.</li></ol><p>However, these are understandable because the author’s development goal at the time was to perform text assembly&#x2F;disassembly. No structure or interface was established for the decoded information. In general, using this disassembly engine today is antiquated.</p><h2 id="2-BeaEngine"><a href="#2-BeaEngine" class="headerlink" title="2. BeaEngine"></a>2. BeaEngine</h2><p><a href="https://github.com/BeaEngine/beaengine">BeaEngine</a> is the second library I used. At that time, the OD library could no longer meet my needs. When making a decompiler, I needed a library that could decode as much information as possible, so I found <code>BeaEngine</code>. I remember that the previous version of this library did not support high 8-bit register recognition, but the current version does. I haven’t found any obvious shortcomings while using it, and many new extended instruction sets that are not commonly used have also been implemented.</p><p>The extended instruction sets currently implemented are:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FPU, MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, VMX, CLMUL, AES, MPX</span><br></pre></td></tr></table></figure><p>Simultaneously, it classifies different types of instructions, which is very convenient when judging different instructions. Another feature is that it can decode the registers used and affected by each instruction, including the flag register, and even the exact location of each bit in the flag register. This function is perfect for making optimizers and obfuscators.</p><p>However, personally, I think the coding style of <code>BeaEngine</code> is really not good, with all kinds of forced type conversions and naming styles. It gives a messy feeling. For someone like me who has a cleanliness obsession with coding, it’s unbearable, so I switched to other libraries. If you don’t mind these, BeaEngine’s performance is still relatively good. However, be aware that BeaEngine has been known to exhibit occasional bugs.</p><h2 id="3-udis86"><a href="#3-udis86" class="headerlink" title="3. udis86"></a>3. udis86</h2><p><a href="https://github.com/vmt/udis86"><code>udis86</code></a> has emerged as my preferred disassembly engine. The udis86 codebase is notable for its clean and concise style. Functions and variables are named descriptively, making the code easy to read and understand. The interface is well-defined and flexible. Even maintaining a personal branch is straightforward, as understanding the overall architecture takes very little time.</p><p>udis86 supports these X86 extended instruction sets:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MMX, FPU (x87), AMD 3DNow, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AES, AMD-V, INTEL-VMX, SMX</span><br></pre></td></tr></table></figure><p>The advantage of udis86 is that the interface is very flexible. You can choose to use <code>ud_decode</code> to decode an instruction and then use <code>ud_translate_intel</code> on the decoded structure to convert it into assembly code, or you can directly use <code>ud_disassemble</code> to complete the entire operation at once. All these interfaces can be used in one line.</p><p>Due to the modular design concept of udis86, it can adapt to various scenarios. If you want to develop a disassembler like IDA, it can do it; if you want to develop an instruction simulator, analyzer, optimizer, or obfuscator, it can do it.</p><p>This concept directly enables udis86 to have strong adaptability while taking into account performance. I have done performance tests, and udis86 is the engine with the fastest decoding speed in cases with similar decoding detail capabilities.</p><p>As for shortcomings, I haven’t found any yet, but udis86 does not support BeaEngine’s register analysis, which is somewhat regrettable.</p><h2 id="4-Capstone"><a href="#4-Capstone" class="headerlink" title="4. Capstone"></a>4. Capstone</h2><p><a href="https://github.com/aquynh/capstone"><code>capstone</code></a> should be regarded as the culmination of all disassembly engines. I have to spend somewhat more time on it because I have a love-hate relationship with it. Capstone is ported from the MC component part of the <code>LLVM</code> framework, so the <code>CPU</code> architectures supported by <code>LLVM</code> are also supported by capstone.</p><p>The CPU architectures it supports are: <code>Arm, Arm64 (Armv8), M68K, Mips, PowerPC, Sparc, SystemZ, XCore &amp; X86 (include X86_64)</code>.</p><p>Capstone boasts the most comprehensive X86 instruction set support among these engines, including:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3dnow, 3dnowa, x86_64, adx, aes, atom, avx, avx2, avx512cd, avx512er, avx512f, avx512pf, bmi, bmi2, fma, fma4, fsgsbase, lzcnt, mmx, sha, slm, sse, sse2, sse3, sse4.1, sse4.2, sse4a, ssse3, tbm, xop.</span><br></pre></td></tr></table></figure><p>This robust support makes it a top contender.</p><p>In the context of the current popularity of mobile terminals, very few disassembly libraries support ARM. If you want to develop compilers under both X86 and ARM simultaneously, it would be better to use a unified interface. Additionally, the <code>next</code> branch of capstone (the <code>master</code> branch does not have this interface) also supports the cool stunt of analyzing the registers used and affected by instructions when decoding, like BeaEngine. With such a basic library, you can be somewhat lazy.</p><p>From the perspective of the X86&#x2F;64 platform alone, whether in decoding ability or instruction set support, <code>Capstone</code> can be called a complete existence that surpasses <code>BeaEngine</code>.</p><p>Having sung its praises, it’s time to talk about the shortcomings.</p><p>Because <code>capstone</code> is ported from <code>LLVM</code>, <code>capstone</code> is a <code>C</code> language project, while <code>LLVM</code> is a <code>C++</code> project, so much adaptation work was done during the porting process, making it bloated.</p><p>For example, <code>MCInst</code> in <code>LLVM</code> is a description class for single-instruction underlying mechanism instructions. Because <code>capstone</code> is a C project, these classes are turned into structures during transplantation, and member functions are turned into independent C functions, such as <code>MCInst_Init</code>, <code>MCInst_setOpcode</code>, etc. Because of the complexity and high compatibility of the <code>LLVM</code> framework, all the concepts in it have been highly abstracted, and Capstone has also made an adaptation interface to convert it to its own architecture, which causes too many intermediate layers during decoding, resulting in performance degradation. The order of important intermediate layer structures used in the decoding process of an instruction is as follows:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MCInst =&gt; InternalInstruction =&gt; cs_insn</span><br></pre></td></tr></table></figure><p>The most basic decoding work relies on the LLVM architecture to decode to Capstone’s <code>InternalInstruction</code>, which is an internal structure containing all the details in the decoding process. After the decoding is completed, <code>update_pub_insn</code> is called to copy the content that needs to be publicly exposed to <code>cs_insn</code>. Other disassembly engines decode to the target structure at once.</p><p>Capstone’s decoding process is so complicated that it naturally affects performance. I have done a less rigorous performance test, and Capstone’s performance consumption time is about five or six times that of udis86 (by the way, I gave Capstone a small Pull Request, <a href="https://github.com/aquynh/capstone/pull/484">here</a> and <a href="https://github.com/aquynh/capstone/pull/505">here</a>, the PR comes with a benchmark that, after testing, shows the performance is improved by nearly 20%). If tested in another way, udis86 only uses <code>ud_decode</code> to decode, and Capstone, which does not have an independent decoding interface, needs some hacking so that it does not generate assembly text. Then, the consumption time of Capstone is about twice that of udis86, which shows that the text operation of Capstone is much slower than udis86.</p><p>Second, Capstone consumes much memory. When decoding an instruction, the instruction structure <code>cs_insn</code> passed in must be allocated by a dynamic allocation function, and it must be allocated twice, once for cs_insn and once for cs_detail. This will cause a huge amount of memory fragmentation. Additionally, the structure of each instruction is very large. I don’t remember how large, but <code>sizeof(cs_insn)</code>+<code>sizeof(cs_detail)</code> seems to be at least 2K or more. It is necessary to use dynamic memory. This is the difference between Capstone and other disassembly engines. If you want to use Capstone for much instruction analysis, you need to equip it with a fixed object memory allocator, which can slightly alleviate the memory fragmentation situation and improve performance somewhat.</p><p>Perhaps for these reasons, the x64dbg community originally used BeaEngine as the supporting foundation. However, BeaEngine always exhibited many bugs, so it was later replaced by Capstone. However, they only use Capstone for the text disassembly of the GUI because although the decoding speed is not great, there are few bugs (after all, LLVM has a large company like Apple for support). The flow graph and instruction analysis (not yet perfected) still use BeaEngine, which is unavoidable; after all, performance is also very important.</p><p>Another problem is that if you need a disassembly engine with strong decoding capabilities, I recommend comparing the decoding structures of each engine before choosing to see if it has any fields that you need.</p><p>Capstone has a frustrating issue. Although its decoding ability is actually very strong, Capstone encapsulates the middle layer and only exposes the fields that it thinks need to be exposed. Its maintainer is somewhat stubborn (or perhaps, “rigorous”) and insists that less commonly used fields do not need to be exposed and that a simple interface is best.</p><p>For example, the offset of the immediate Immediate in the instruction and the offset of the Displacement in the memory operand, originally in the internal structure <code>InternalInstruction</code>, are discarded when copied to the public structure <code>cs_insn</code>. There are also <code>REP</code> and <code>REPE</code> prefixes. Although they are represented by the same constant, they have different functions when combined with different instructions. For this, Capstone internally has a <code>valid_repe</code> function that can distinguish them, but it is not exposed to the public structure and is recognized as <code>REP</code>. Although these are very specialized, they are still very useful for instruction analysis and transformation.</p><p>I personally think that the interface of Capstone is really frustrating to use, but its function is powerful. If you study the internal structure of its source code, you will find that many interfaces are not provided but are internally available. I maintain a <a href="https://github.com/bughoho/capstone">branch</a> myself, using it with joy and pain.</p><h2 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h2><p>Actually, there is also XDE, but I haven’t used it, so I won’t comment on it.</p><p>Additionally, a length-disassembly engine in <a href="https://github.com/DarthTon/Blackbone">blackbone</a> is worth mentioning. It is called <code>ldasm</code>. It’s not really an engine because it has only one function: to calculate the length of an instruction. This is very useful when relocating jump instructions during hooking. <a href="https://github.com/DarthTon/Blackbone/blob/master/src/BlackBone/Asm/LDasm.c">Code Portal</a></p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>Each of these disassembly engines has its strengths (except for OD), but each has some minor flaws. There is no such thing as perfection in this world. They are open source, so it’s great to use them. But you have to contribute yourself, right? Pick a good library, find bugs during use, submit an Issue to the community, or make a solution and then send a Pull Request. That is a way to pay for using it.</p><table><thead><tr><th align="center">Feature</th><th align="left">Comparison</th></tr></thead><tbody><tr><td align="center">Performance</td><td align="left">udis86 &gt; BeaEngine &gt; capstone</td></tr><tr><td align="center">Detail in Decoded Output</td><td align="left">capstone &gt; BeaEngine &gt; udis86 (udis86 does not support register analysis; the remaining decoding capabilities are similar)</td></tr><tr><td align="center">Platform support</td><td align="left">capstone &gt; (udis86 &#x3D; BeaEngine)</td></tr><tr><td align="center">X86 extended instruction set</td><td align="left">capstone &gt; (udis86 ≈ BeaEngine)</td></tr></tbody></table><p>If you need an X86&#x2F;64 disassembly engine with good performance and strong decoding ability but don’t need stunts like register analysis, then udis86 is right for you. If you also need register analysis functions, then BeaEngine and Capstone are right for you. If you also need ARM architecture support, then Capstone should suit you better.</p><p>Ultimately, the best engine for a given task depends on the specific needs and priorities of the project.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;A-Non-Professional-Comparison-of-Various-Open-Source-Assembly-Disassembly-Engines&quot;&gt;&lt;a href=&quot;#A-Non-Professional-Comparison-of-Variou</summary>
      
    
    
    
    <category term="disassembly" scheme="https://en.sirtech.cc/categories/disassembly/"/>
    
    
  </entry>
  
  <entry>
    <title>YY 2015 Reverse Analysis (1) Underlying Communication Mechanism</title>
    <link href="https://en.sirtech.cc/2015/11/04/yy-2015-reverse-analysis-1-underlying-communication-mechanism/"/>
    <id>https://en.sirtech.cc/2015/11/04/yy-2015-reverse-analysis-1-underlying-communication-mechanism/</id>
    <published>2015-11-04T00:00:00.000Z</published>
    <updated>2015-11-04T00:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>YY 2015 Reverse Analysis (1) Underlying Communication Mechanism</p><h2 id="Foreword"><a href="#Foreword" class="headerlink" title="Foreword"></a>Foreword</h2><p>Having previously studied the protocol of YY version 6.2, I recently revisited it and found that the current version, 8.3.0.0, has undergone significant changes. Key exchange no longer utilizes <code>ZLIB</code> compression, and all command words have been completely revised. However, the communication algorithm remains unchanged, utilizing <code>RSA</code> + <code>RC4</code>.</p><h2 id="Underlying-Communication-Process"><a href="#Underlying-Communication-Process" class="headerlink" title="Underlying Communication Process"></a>Underlying Communication Process</h2><ol start="0"><li><p>YY’s packet structure consists of a 4-byte length field, a 4-byte command word, and the remaining data. This structure allows for packet segmentation based on the initial 4 bytes. However, other situations exist, such as nested packets. These occur when a command word packet contains one or more sub-command packets. These sub-command packets may be processed independently or require data from the parent packet.</p></li><li><p>Initially, the client transmits <code>UDP</code> packets to several servers (four, in this case) to request IP addresses. The server then provides a list of servers and corresponding lists that support the received client version number.</p></li></ol><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">61 00 00 00 1E 73 00 00 C8 00 FF FF FF FF FF FF   a....s..?.......</span><br><span class="line">FF FF 03 01 00 00 00 00 00 00 20 00 35 34 64 37     ........ .54d7</span><br><span class="line">63 62 39 31 35 38 31 38 32 30 39 38 65 38 36 32   cb9158182098e862</span><br><span class="line">66 66 38 39 30 64 62 66 61 33 63 30 00 00 30 80   ff890dbfa3c0..0.</span><br><span class="line">07 00 38 2E 33 2E 30 2E 30 02 00 79 79 00 00 00   ..8.3.0.0..yy...</span><br><span class="line">00 00 00 00 00 00 00 04 08 00 00 00 00 00 00 00   ................</span><br><span class="line">00††††††††††††††††††††††    .</span><br></pre></td></tr></table></figure><p>One of these servers responds with <code>0x741E</code>, providing the requested IP list. (Other servers may also respond, but the client ceases listening after receiving the first valid response). Note that the byte offset +4 within each packet represents the command word (this convention applies throughout the analysis), as exemplified by <code>0x731E</code> in this instance.</p><ol start="2"><li>From the received IP list, the client randomly selects several servers (six in this example) and sends login requests. Five of these requests utilize <code>UDP</code>, while one uses <code>TCP</code>. The data payload of these packets is identical.</li></ol><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">34 00 00 00 01 14 00 00 C8 00 00 00 00 00 30 80   4.......?.....0.</span><br><span class="line">FF FF FF FF 08 00 62 75 67 73 74 65 73 74 00 00   ..bugstest..</span><br><span class="line">04 08 00 00 01 00 00 00 00 00 00 00 00 00 00 00   ................</span><br><span class="line">00 00 00 00††††††††††††††††††   ....</span><br></pre></td></tr></table></figure><ol start="3"><li>The fastest-responding server replies with the <code>0x1501</code> command. The byte at offset +0C contains the feedback result. A value of <code>0xC8</code> indicates success, with the subsequent data containing the IP address and port of the designated login server. Other values, such as <code>97 01 00 00</code>, signify an outdated client version requiring an upgrade.</li></ol><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">54 00 00 00 01 15 00 00 C8 00 00 00 C8 00 00 00   T.......?...?...</span><br><span class="line">02 00 00 00 70 75 DC EB DA 85 3B 14 00 00 03 00   ....pu????;.....</span><br><span class="line">00 00 91 1F 39 04 51 00 6F B2 91 8A 4D E6 3B 14   ..? 9.Q.o???M?;.</span><br><span class="line">00 00 03 00 00 00 94 1F 39 04 54 00 00 00 00 00   ......? 9.T.....</span><br><span class="line">01 00 11 00 AB 5B 54 76 00 00 00 00 00 00 00 00   ....?[Tv........</span><br><span class="line">F4 01 00 00††††††††††††††††††   ?...</span><br></pre></td></tr></table></figure><ol start="4"><li>The actual login process commences at this point. The client randomly selects one server from the received login IP list and establishes a connection. Upon successful connection, the client initiates a key exchange by sending a packet to the server. The command word for this packet is <code>0x1104</code> or <code>0x3204</code>, varying depending on the target server type, as multiple server types are involved in the login process, including verification, channel, and friend servers.</li></ol><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">53 00 00 00 04 11 00 00 C8 00 40 00 E9 03 40 F2   S...  ..?@.?@?</span><br><span class="line">4D ED C4 86 32 9B 25 F1 7A D8 94 70 D5 E2 20 6C   M砟??駔財p这 l</span><br><span class="line">F0 B7 AF FD 5A DD A4 A6 F3 CA F5 8C CE 7B 9B CB   鸱Z荬术屛&#123;浰</span><br><span class="line">2D AB 49 45 04 61 93 9C 4F 7D 40 DE E1 E4 8B 19   -獻E a摐O&#125;@掎鋴 </span><br><span class="line">BC 89 C2 E0 76 29 58 2E 2F BB A6 51 01 00 03 00   級锣v)X./沪Q . .</span><br><span class="line">00 00 00                                          ...</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">66 00 00 00 04 32 00 00 C8 00 40 00 E9 03 40 F2  f... 2..?@.?@?</span><br><span class="line">4D ED C4 86 32 9B 25 F1 7A D8 94 70 D5 E2 20 6C  M砟??駔財p这 l</span><br><span class="line">F0 B7 AF FD 5A DD A4 A6 F3 CA F5 8C CE 7B 9B CB  鸱Z荬术屛&#123;浰</span><br><span class="line">2D AB 49 45 04 61 93 9C 4F 7D 40 DE E1 E4 8B 19  -獻E a摐O&#125;@掎鋴 </span><br><span class="line">BC 89 C2 E0 76 29 58 2E 2F BB A6 51 01 00 03 13  級锣v)X./沪Q .  </span><br><span class="line">00 00 00 13 00 00 00 04 E8 0B 00 C8 00 00 00 05  ... ... ?.?.. </span><br><span class="line">00 6C 6F 67 69 6E                                .login</span><br></pre></td></tr></table></figure><p>The byte at offset +4 represents the 0x40 byte, which corresponds to the client-generated public key, specifically the <code>N</code> component of the <code>RSA</code> key pair. The byte at offset +0x4E represents the <code>E</code> component of the <code>RSA</code> key pair. This packet serves to inform the server that the subsequently issued <code>RC4</code> key is encrypted using this <code>RSA</code> public key.</p><ol start="5"><li>Upon receiving the client’s key, the server responds with either <code>0x3304</code> or <code>0x1504</code>. Previously, the key within this packet was compressed using <code>zlib</code>; however, this compression has been removed, likely for server-side performance optimization.</li></ol><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">50 00 00 00 04 15 00 00 C8 00 40 00 7B 89 12 1B  P.........@.&#123;...</span><br><span class="line">FE 8F AC 7A BF 02 D4 34 42 D9 52 29 21 EA 0D 13  ...z...4B.R)!...</span><br><span class="line">27 EC C0 11 BB 59 A8 7F 9C 95 AE B7 9C 09 5A 3C  &#x27;....Y........Z&lt;</span><br><span class="line">43 A1 55 8E DA A0 2D F6 CA E9 EB F4 DC D3 DC C5  C.U...-.........</span><br><span class="line">64 8E 75 91 AE 32 A4 28 04 88 CA 79 00 00 00 00  d.u..2.(...y....</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">18 09 00 00 04 33 00 00  C8 00 40 00 22 79 01 D6 .....3....@.&quot;y..</span><br><span class="line">58 E0 86 9C A2 57 37 21  89 4B BF 7F C2 F2 BE 64 X....W7!.K.....d</span><br><span class="line">48 00 8B E6 14 82 C3 0E  D0 FF 80 3C 2C 60 F2 DD H..........&lt;,`..</span><br><span class="line">7F BA A4 67 17 C1 DA CA  F4 D6 C0 4E B2 EE A7 90 ...g.......N....</span><br><span class="line">23 3E 46 1D D4 A4 B4 E5  91 14 FE F5 C8 08 00 00 #&gt;F.............</span><br><span class="line">C8 08 00 00 04 E9 0B 00  C8 00 00 00 BA 08 B6 08 ................</span><br><span class="line">00 00 06 00 04 00 00 00  FF FF 00 00 17 27 54 08 .............&#x27;T.</span><br><span class="line">00 00 78 DA 8D 57 4D 6C  1B C7 15 7E 43 AD 4D 49 ..x..WMl...~C.MI</span><br><span class="line">D6 8F AD C6 86 64 BB 8E  9A BA 46 0E 75 10 5B 76 .....d....F.u.[v</span><br><span class="line">E5 9C 32 4B 8A 22 F5 47  D2 22 25 45 69 22 7B 45 ..2K.&quot;.G.&quot;%Ei&quot;&#123;E</span><br><span class="line">...omitted later</span><br></pre></td></tr></table></figure><p>Notably, in addition to the key, the <code>0x3304</code> packet also delivers a bytecode module to the client, responsible for initializing the dynamic environment. Numerous subsequent packets follow this pattern, containing dynamic detection code issued by the server.</p><p>The 0x40 bytes starting at offset <code>0C</code> within these two packets contain the <code>RC4</code> key encrypted with the server’s <code>RSA</code> private key. After decryption, the resulting <code>RC4</code> key is duplicated, with one copy designated for encryption and the other for decryption. This marks the completion of the YY key negotiation process. All subsequent data exchanged between the client and server will be encrypted using the established <code>RC4</code> session key.</p><p>The algorithm implementations reside within exported functions of the <code>dwUtility.dll</code> library. The table below provides translations for several relevant functions:</p><table><thead><tr><th>Exported Function Name</th><th align="center">Function</th></tr></thead><tbody><tr><td>DwUtility::dwBaseFunc::dwUtilityrgk</td><td align="center">Initialize RSA structure</td></tr><tr><td>DwUtility::dwBaseFunc::dwUtilityrpd</td><td align="center">RSA decryption algorithm</td></tr><tr><td>DwUtility::dwBaseFunc::dwUtilitybb</td><td align="center">Convert large numbers to binary</td></tr><tr><td>DwUtility::dwBaseFunc::dwUtilityrsk</td><td align="center">Initialize RC4 structure</td></tr><tr><td>DwUtility::dwBaseFunc::dwUtilityr</td><td align="center">RC4 encryption\decryption algorithm</td></tr></tbody></table><p>These represent a few key algorithms within the <code>dwUtility.dll</code> library, which contains numerous other basic functions available for further exploration.</p><p>Analyzing the communication flow solely with a debugger like OllyDbg (OD) proves challenging due to the mixture of encrypted and unencrypted data, coupled with the multitude of connected sockets. To facilitate analysis, a custom tool was developed to display both the raw and decrypted packet data, differentiating packets based on their associated socket.</p><p><code>Picture lost</code></p><h2 id="End"><a href="#End" class="headerlink" title="End"></a>End</h2><p>YY employs a parallel login approach, simultaneously sending requests to multiple (N) servers and utilizing the fastest response. This strategy places demanding performance requirements on the login server cluster, as each server must be equipped to handle a potentially large volume of requests. The key establishment process highlights YY’s emphasis on load balancing and efficient resource utilization.</p><p>This concludes the present analysis of YY’s underlying communication mechanism. A future analysis will delve into the specific content and structure of YY login packets.</p><p>For inquiries or feedback, please contact bughoho[at]gmail.com.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;YY 2015 Reverse Analysis (1) Underlying Communication Mechanism&lt;/p&gt;
&lt;h2 id=&quot;Foreword&quot;&gt;&lt;a href=&quot;#Foreword&quot; class=&quot;headerlink&quot; title=&quot;Forew</summary>
      
    
    
    
    <category term="Revese Engineering" scheme="https://en.sirtech.cc/categories/Revese-Engineering/"/>
    
    
    <category term="yy" scheme="https://en.sirtech.cc/tags/yy/"/>
    
    <category term="ReveseEngineering" scheme="https://en.sirtech.cc/tags/ReveseEngineering/"/>
    
    <category term="network" scheme="https://en.sirtech.cc/tags/network/"/>
    
  </entry>
  
</feed>
